 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Livro {
  id                 Int      @id @default(autoincrement())
  titulo             String   
  autor              String   
  codigodoLivro      String   
  secao              String
  sinopse            String
  foto               String
  genero             String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  clientes            Cliente[]

  admin              Admin        @relation(fields: [adminId], references: [id])
  adminId            Int          @default(1)

  reservas           Reserva[] 
  renovacoes         Renovacao[]

  comentarios        Comentario[]

  fotos              Foto[]
  Historico         Historico[]
  
  @@map("livros")
 
}


model Cliente {
  id                  Int      @id @default(autoincrement())
  nome                String   @db.VarChar(60) 
  email               String   @db.VarChar(60) @unique
  senha               String   @db.VarChar(60)   // senha deve ser varchar(60)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  livros              Livro[]
  reservas            Reserva[]
  renovacoes          Renovacao[]
  comentarios         Comentario[]
  historicos          Historico[]
  cadastro            Cadastro[]

  @@map("clientes")
}

model Admin {
  id           Int      @id @default(autoincrement())
  nome         String   @db.VarChar(60)
  email        String   @db.VarChar(60) @unique
  senha        String   @db.VarChar(60)   // senha deve ser varchar(60)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt  
  livros       Livro[]
  @@map("admins")
}

model Foto { 
  id               Int           @id  @default(autoincrement())
  autor            String        
  codigoFoto       String        @db.Text
  livro            Livro         @relation(fields: [livroId], references: [id])
  livroId             Int

  @@map("fotos")
} 

model Reserva {
  id                  Int          @id @default(autoincrement())

   livro               Livro       @relation(fields: [livroId], references: [id])
  livroId             Int

  cliente              Cliente    @relation(fields: [clienteId], references: [id])
  clienteId            Int       

  datadaReserva       DateTime 
  Historico           Historico[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt  
 
  @@map("reservas")
  
}

model Cadastro {
  id                   Int      @id @default(autoincrement())
  email                String   @db.VarChar(60) @unique
  senha                String   @db.VarChar(60) 
  confirmaSenha        String   @db.VarChar(60)
  nome                 String   @db.VarChar(60)
  escolaridade         String   @db.VarChar(60) 
  telefone             String   @db.VarChar(60)
  instituicao          String   @db.VarChar(60)

  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  cliente               Cliente[]        
  @@map("cadastros") 
}

model Renovacao {
  id                    Int         @id @default(autoincrement())
  
  datadaEntrega         DateTime

  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt 

  clienteId             Int
  cliente               Cliente        @relation(fields: [clienteId], references: [id])

  livroId               Int
  livro                 Livro          @relation(fields: [livroId], references: [id])

   Historico             Historico[]

  @@map("renovacoes")
 
}

model Comentario {
  id                  Int           @id @default(autoincrement())

  livro                Livro         @relation(fields: [livroId], references: [id])
  livroId              Int

  cliente               Cliente        @relation(fields: [clienteId], references: [id])
  clienteId             Int           
  
  descricao             String       @db.VarChar(255) 
  resposta              String?      @db.VarChar(255)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt


  @@map("comentarios")               
}

model Historico { 
  id                    Int           @id  @default(autoincrement())
  titulo                String        
  datadaReserva         DateTime  
  status                String
  datadaEntrega         DateTime
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  clienteId             Int
  cliente               Cliente        @relation(fields: [clienteId], references: [id]) 

  livro                Livro         @relation(fields: [livroId], references: [id])
  livroId              Int

  reservas             Reserva[]
  renovacoes           Renovacao[]

  @@map("historicos")
}
